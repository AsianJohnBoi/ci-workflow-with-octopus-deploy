# .github/workflows/version.yml
name: CI Workflow

on: 
  push:
    branches:
      - 'main'
      - 'release/**'
  release:
    types: 
      - published

jobs:
  "generate_version":
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generated-version.outputs.VERSION }}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/cache@v2
      id: cache
      with:
        path: /usr/bin/dotnet
        key: ${{ runner.os }}-dotnet

    - name: Install GitVersion
      if: steps.cache.outputs.cache-hit != 'true'
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.8.1'
    
    - name: Determine Version 
      id:   gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
    
    - name: Display GitVersion outputs
      id: generated-version
      run: |
        echo "::set-output name=VERSION::${{ steps.gitversion.outputs.semVer }}.$GITHUB_RUN_NUMBER-${{ steps.gitversion.outputs.shortSha }}"

  "build_docker_image":
    runs-on: ubuntu-latest
    needs: "generate_version"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Authenticate with the Github Container Registry 🔐
      run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u USERNAME --password-stdin

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-single-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-single-buildx

    - name: Build and push docker image 🏗 📦 🐳
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        platforms: linux/amd64
        push: true
        tags: ghcr.io/asianjohnboi/${{ github.event.repository.name }}:${{ needs.generate_version.outputs.version }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # Prevents the cache from growing forever
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  "release_to_octopus_deploy":
    runs-on: ubuntu-latest
    needs: 
      - "generate_version"
      - "build_docker_image"
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install Octopus CLI 🐙 ➡ 💻
      uses: OctopusDeploy/install-octopus-cli-action@v1.1.1

    - name: Package artifacts for Octopus Deploy 📦  
      run: >
        octo pack --id="${{ github.event.repository.name }}" --format="zip" --version=${{ needs.generate_version.outputs.version }} --basePath=".deploy" --outFolder=".artifacts/nuget"
    
    - name: Push a package to Octopus Deploy 📦 ➡ 🐙
      uses: OctopusDeploy/push-package-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTO_API_KEY }}
        packages: '.artifacts/nuget/${{ github.event.repository.name }}.${{ needs.generate_version.outputs.version }}.zip'
        server: ${{ secrets.OCTO_SERVER }}
    
    - name: Set Octopus Channel
      id: octopus-channel
      run: |
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then 
          echo "::set-output name=OCTO_CHANNEL::Release" 
        else
          echo "::set-output name=OCTO_CHANNEL::Unstable"
        fi

    - name: Create a release in Octopus Deploy 🚀 ➡ 🐙
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTO_API_KEY }}
        server: ${{ secrets.OCTO_SERVER }}
        project: ${{ github.event.repository.name }}
        release_number: ${{ needs.generate_version.outputs.version }}
        channel: ${{ steps.octopus-channel.outputs.OCTO_CHANNEL }}
        packages: ${{ github.event.repository.name }}:${{ needs.generate_version.outputs.version }}